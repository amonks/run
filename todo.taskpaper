TODO

bugs:
	- when running a short task in the TUI, run completion does not kill
	  the tui (good) but _does_ log to stdout, which breaks the tui (bad)
	- if the root task has no cmd, and the run is short, the run never
	  exits
	- interleaved output isn't wrapped. This is correct when logging to
	  stdout, but is not correct when logging into a TUI. Plus the wrapping
	  extends the window frame down, which is goofy.

TUI:
	- see how things look on light backgrounds
	- the tui spacing feels kind of weird
	- key shortcut for force-retrigger
	- mark tasks in ui based on on state
	- colorhash task names in list
	- /-to-search in pager mode
	- w-to-save in pager mode
	- g-to-make-gist in pager mode

tasks:
	- validate for cycles

runner:
	- any use-cases for periodic invalidation?
	- the "run" output is really just "file watches", which we could easily
	  move into the individual per-task streams. Either get rid of "run" or
	  do more with it.

cli:
	- colorize help output lol why not
	- flag to output parsed task set as json or something?
	- fzf-style task selector if run with no args and folder has tasks.toml

doc:
	- add cli flag reference to readme? or... add the entire -help output
	  to the README? or... just replace the readme with -help output?

always-tui?:
	Auto-exit the UI when a short run ends, and then print output on-exit. Maybe
	best of both words? (the logs don't just disappear, plus you get multiplexing
	while the thing runs, which might help if it's long-ish). Downside is that if
	the run is _very_ short, the flash of TUI might be jarring.

bazely caching?:
	tasks optionally take "inputs" and produce "outputs"
	dirhash the inputs, save the hashes somewhere, skip reruns if unchanged

input?:
	Tasks can't take any input. Not flags, not stdin, not nothin else besides.
	One dogfoody use case for this would be a tag-and-release script for Run,
	which would require specifying a version identifier somehow.

	"not run's purview" is a reasonable answer.

	"tasks can declare structured inputs, which the UI can handle appropriately"
	might be fun.


