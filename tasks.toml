[[task]]
  id = "build"
  type = "short"
  dependencies = ["test", "screenshots", "generate-docs"]
  cmd = """
    echo "Doing a test build..."
    go run github.com/goreleaser/goreleaser release --snapshot --clean
    echo ""
    echo "Done. Commit the changes, if any, make a git tag, push it, and then"
    echo "hit New Release in github."
    echo ""
    echo "    git add ."
    echo "    git commit"
    echo "    set version v0.0.0-beta.0"
    echo "    git tag -a $version -m $version"
    echo "    git push origin $version"
  """

[[task]]
  id = "test"
  type = "short"
  cmd = "go test -v ."

[[task]]
  id = "install"
  type = "short"
  dependencies = ["generate"]
  cmd = "go install ./cmd/run"

[[task]]
  id = "generate"
  type = "short"
  cmd = "go generate ./..."

[[task]]
  id = "screenshots"
  type = "short"
  dependencies = [
    "screenshot-tui",
    "screenshot-printer",
    "screenshot-nontty",
  ]
  cmd = """
    echo cleaning up
    echo "" > example/src.js
    echo "" > example/src.css
    echo "" > example/dist.js
    echo "" > example/dist.css
  """

[[task]]
  id = "screenshot-tui"
  type = "short"
  dependencies = ["install"]
  cmd = """
    cd example
    vhs ../screenshots/tui.tape
    mv tui.gif ../screenshots/
  """

[[task]]
  id = "screenshot-printer"
  type = "short"
  dependencies = ["install"]
  cmd = """
    cd example
    vhs ../screenshots/printer.tape
    mv printer.gif ../screenshots/
  """

[[task]]
  id = "screenshot-nontty"
  type = "short"
  dependencies = ["install"]
  cmd = """
    cd example
    vhs ../screenshots/nontty.tape
    mv nontty.gif ../screenshots/
  """

[[task]]
  id = "overwrite-snapshots"
  type = "short"
  cmd = """
    cd testdata/examples
    for d in * ; do
      if test -f $d/fail.log ; then
        echo overwriting $d
        mv $d/fail.log $d/out.log
      fi
    done
  """

[[task]]
  id = "generate-docs"
  type = "short"
  cmd = """
    godoc -http=0.0.0.0:3335 &

    sha=$(git rev-parse --short HEAD)

    for (( ; ; )); do
      sleep 0.5
      if [[ $(curl -so /dev/null -w '%{http_code}' "http://localhost:3335/pkg/github.com/amonks/run/") -eq 200 ]]; then
        break
      fi
    done

    wget --quiet --mirror --page-requisites --no-parent http://localhost:3335/pkg/github.com/amonks/run

    cd localhost:3335
    mv pkg/github.com/amonks/run index.html
    rm -r pkg

    # Make links outside the module use pkg.go.dev.
    sd '"/pkg' '"https://pkg.go.dev/pkg' index.html

    # Correct for putting run at the server root.
    sd '"/lib' '"/run/lib' index.html

    # Make source code links point to github.
    sd '"/src/github.com/amonks/run/' '"https://github.com/amonks/run/blob/main/' index.html

    # Try to convert the selection anchors on github links. Puzzlingly, godoc's
    # line anchors are 10 less than you'd expect: eg #L100 highlights line 110.
    grep '?s=\\d\\+:\\d\\+#L' index.html | while read -r old_line ; do
      old_lineno="$(echo $old_line | sd '^.*\\?s=\\d+:\\d+#L(\\d+).*$' '$1')"
      new_lineno="$(($old_lineno + 10))"
      new_line="$(echo $old_line | sd '\\?s=\\d+:\\d+#L'$old_lineno '#L'$new_lineno)"
      sd -s "$old_line" "$new_line" index.html
    done

    # Remove the topbar and footer entirely.
    sed -i -e '/topbar/,+11d' index.html
    sed -i -e '/footer/,+8d' index.html

    # Remove the link to the subdirectories section.
    sed -i -e '/#pkg-subdirectories/,+1d' index.html

    # Remove the subdirectories section. This is insanely brittle. The
    # subdirectories section is only 51 lines because we have exactly three
    # subdirectories.
    sed -i -e '/"pkg-subdirectories/,+51d' index.html

    rm index.html-e
    cd ..

    if test -d docs ; then
      rm -r docs
    fi
    mv localhost:3335 docs
  """
