package main

import (
	"flag"
	"go/ast"
	"go/parser"
	"go/token"
	"os"
	"path/filepath"
	"strings"
)

var (
	file   = flag.String("file", os.Getenv("GOFILE"), "the file to search for msg types")
	prefix = flag.String("prefix", "msg", "a prefix; types whose names have this prefix will be generated")
)

func main() {
	flag.Parse()
	if err := run(); err != nil {
		panic(err)
	}
}

func run() error {
	fset := token.NewFileSet()
	f, err := parser.ParseFile(fset, *file, nil, 0)
	if err != nil {
		return err
	}

	var (
		packageName string
		ts          []string
	)
	ast.Inspect(f, func(n ast.Node) bool {
		switch n := n.(type) {
		case *ast.File:
			packageName = n.Name.String()
		case *ast.TypeSpec:
			name := n.Name.String()
			if strings.HasPrefix(name, *prefix) {
				ts = append(ts, name)
			}
		}
		return true
	})

	var b strings.Builder
	b.WriteString("// Code generated by \"messagestringer -file=" + *file + " -prefix=" + *prefix + "\"; DO NOT EDIT.\n\n")
	b.WriteString("package " + packageName + "\n\n")
	b.WriteString("import \"fmt\"\n\n")
	for _, t := range ts {
		b.WriteString("func (msg " + t + ") String() string {\n")
		b.WriteString("\treturn fmt.Sprintf(\"[" + t + " %#v]\", msg)\n")
		b.WriteString("}\n\n")
	}

	outputName := strings.TrimSuffix(*file, filepath.Ext(*file))
	outputFilename := outputName + "_msgstrings.go"
	if err := os.WriteFile(outputFilename, []byte(b.String()), 0644); err != nil {
		return err
	}

	return nil
}
